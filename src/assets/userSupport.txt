import { useState, useEffect } from "react";
import {
  Plus,
  MessageCircle,
  Clock,
  CheckCircle,
  AlertCircle,
  Loader2,
  Eye,
  HeadphonesIcon,
} from "lucide-react";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import UserMessagesModal from "@/components/support/UserMessageModal";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DashboardLayout } from "@/components/layout/DashboardLayout";
import { useToast } from "@/components/ui/use-toast";
import axios from "axios";
import { useSearchParams } from "react-router-dom";
const BASE_URL = process.env.REACT_APP_BACKEND_URL;
const [searchParams] = useSearchParams();
const ticketId = searchParams.get("ticket");

const getStatusColor = (status: string) => {
  switch (status) {
    case "open":
      return "destructive";
    case "pending":
      return "secondary";
    case "closed":
      return "default";
    default:
      return "default";
  }
};

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case "high":
      return "destructive";
    case "medium":
      return "secondary";
    case "low":
      return "outline";
    default:
      return "outline";
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case "open":
      return AlertCircle;
    case "pending":
      return Clock;
    case "closed":
      return CheckCircle;
    default:
      return MessageCircle;
  }
};
// Add this helper at the top, after your imports
const formatDate = (dateStr: string) => {
  const d = new Date(dateStr);
  return isNaN(d.getTime()) ? dateStr : d.toLocaleString();
};

// Helper to get the last message content
const getLastMessage = (ticket: any) => {
  if (!ticket.messages || ticket.messages.length === 0) {
    return ticket.first_message || "No messages yet";
  }
  const lastMsg = ticket.messages[ticket.messages.length - 1];
  return lastMsg.message;
};

// Helper to get last message date
const getLastMessageDate = (ticket: any) => {
  if (!ticket.messages || ticket.messages.length === 0) {
    return null;
  }
  const lastMsg = ticket.messages[ticket.messages.length - 1];
  return formatDate(lastMsg.created_at);
};

export default function UserSupport() {
  const [tickets, setTickets] = useState<any[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [newTicket, setNewTicket] = useState({
    subject: "",
    priority: "",
    category: "",
    description: "",
  });
  const [selectedTicket, setSelectedTicket] = useState<any | null>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [loadingMessages, setLoadingMessages] = useState(false);
  const [newMessage, setNewMessage] = useState("");
  const [sending, setSending] = useState(false);

  const { toast } = useToast();

  const token = localStorage.getItem("token");
  const userEmail = localStorage.getItem("user_email");
  const userId = localStorage.getItem("user_id");
  const userRole = localStorage.getItem("role");

  const fetchTickets = async () => {
    try {
      let url =  `${BASE_URL}/api/tickets`;
      if (userRole !== "admin") {
        url =  `${BASE_URL}/api/tickets/user/${userId}`;
      }
      const res = await axios.get(url, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTickets(res.data);
    } catch (err) {
      console.error("Failed to fetch tickets:", err);
      toast({
        title: "Error",
        description: "Could not load tickets. Please try again.",
        variant: "destructive",
      });
    }
  };

  useEffect(() => {
    const loadTickets = async () => {
      await fetchTickets();

      if (ticketId) {
        const match = tickets.find((t) => t.id.toString() === ticketId);
        if (match) {
          setSelectedTicket(match);
          fetchMessages(match.id);
        }
      }
    };

    loadTickets();
  }, [ticketId]);

  const handleCreateTicket = async () => {
    if (!userId) {
      toast({
        title: "Error",
        description: "You must be logged in to create a ticket.",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      await axios.post(
         `${BASE_URL}/api/tickets`,
        {
          subject: newTicket.subject,
          description: newTicket.description,
          priority: newTicket.priority,
          category: newTicket.category,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      toast({
        title: "Ticket submitted",
        description: "Your support request has been created successfully.",
      });

      setIsCreateDialogOpen(false);
      setNewTicket({
        subject: "",
        priority: "",
        category: "",
        description: "",
      });

      fetchTickets();
    } catch (err) {
      console.error("Failed to create ticket:", err);
      toast({
        title: "Submission failed",
        description: "Something went wrong while creating your ticket.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const filterTicketsByStatus = (status: string) =>
    status === "all" ? tickets : tickets.filter((t) => t.status === status);

  const filteredTickets = (status: string) =>
    filterTicketsByStatus(status).filter(
      (t) =>
        t.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||
        t.id.toString().includes(searchTerm)
    );

  const fetchMessages = async (ticketId: number) => {
    try {
      setLoadingMessages(true);
      const res = await axios.get(
        `${BASE_URL}/api/tickets/${ticketId}/messages`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setMessages(res.data);
    } catch (err) {
      console.error("Failed to fetch messages:", err);
      toast({
        title: "Error",
        description: "Could not load messages for this ticket.",
        variant: "destructive",
      });
    } finally {
      setLoadingMessages(false);
    }
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedTicket) return;

    try {
      setSending(true);
      const res = await axios.post(
        `${BASE_URL}/api/tickets/${selectedTicket.id}/messages`,
        {
          message: newMessage,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const newMsg = res.data; // the new message returned from API

      // 1️⃣ Update messages in modal
      setMessages((prev) => [...prev, newMsg]);

      // 2️⃣ Update the ticket list for last reply and message count
      setTickets((prev) =>
        prev.map((t) =>
          t.id === selectedTicket.id
            ? {
                ...t,
                last_message: newMsg.message,
                last_message_at: newMsg.created_at,
                messages_count: (t.messages_count || 0) + 1,
                messages: [...(t.messages || []), newMsg], // keep messages array
              }
            : t
        )
      );

      setNewMessage("");
    } catch (err) {
      console.error("❌ Failed to send message:", err);
      toast({
        title: "Error",
        description: "Failed to send your message.",
        variant: "destructive",
      });
    } finally {
      setSending(false);
    }
  };

  return (
    <DashboardLayout>
      <div className="space-y-6 p-6">
        <div className="flex items-center justify-between">
          <div className="flex flex-col sm:flex-row items-start  sm:items-center gap-3">
            <HeadphonesIcon className="w-8 h-8 text-primary" />
            <div>
              <h1 className="text-2xl md:text-3xl font-bold">
                {" "}
                Support Center
              </h1>
              <p className="text-muted-foreground">
                Get help with your account and services
              </p>
            </div>

            <div className="ml-auto"></div>
          </div>

          <Dialog
            open={isCreateDialogOpen}
            onOpenChange={setIsCreateDialogOpen}
          >
            <DialogTrigger asChild>
              <Button>
                <Plus className="mr-2 h-4 w-4" /> New Ticket
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-md">
              <DialogHeader>
                <DialogTitle>Create Support Ticket</DialogTitle>
                <DialogDescription>
                  Describe your issue and we'll help you resolve it.
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label>Subject</Label>
                  <Input
                    value={newTicket.subject}
                    onChange={(e) =>
                      setNewTicket({ ...newTicket, subject: e.target.value })
                    }
                  />
                </div>
                <div>
                  <Label>Category</Label>
                  <Select
                    value={newTicket.category}
                    onValueChange={(v) =>
                      setNewTicket({ ...newTicket, category: v })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="billing">
                        Billing & Payments
                      </SelectItem>
                      <SelectItem value="technical">
                        Technical Support
                      </SelectItem>
                      <SelectItem value="account">Account Issues</SelectItem>
                      <SelectItem value="services">Service Requests</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Priority</Label>
                  <Select
                    value={newTicket.priority}
                    onValueChange={(v) =>
                      setNewTicket({ ...newTicket, priority: v })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select priority" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="urgent">Urgent</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Description</Label>
                  <Textarea
                    value={newTicket.description}
                    onChange={(e) =>
                      setNewTicket({
                        ...newTicket,
                        description: e.target.value,
                      })
                    }
                  />
                </div>
                <Button
                  onClick={handleCreateTicket}
                  className="w-full"
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Submitting...
                    </>
                  ) : (
                    "Submit Ticket"
                  )}
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        <Input
          placeholder="Search tickets..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-sm"
        />

        <Tabs defaultValue="all" className="space-y-4">
          <TabsList>
            {["all", "open", "pending", "closed"].map((status) => (
              <TabsTrigger key={status} value={status}>
                {status.charAt(0).toUpperCase() + status.slice(1)}
              </TabsTrigger>
            ))}
          </TabsList>
          {["all", "open", "pending", "closed"].map((status) => (
            <TabsContent key={status} value={status} className="space-y-4">
              {filteredTickets(status).length === 0 ? (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-12">
                    <MessageCircle className="h-12 w-12 text-muted-foreground mb-4" />
                    <h3>No tickets found</h3>
                    <Button onClick={() => setIsCreateDialogOpen(true)}>
                      <Plus className="mr-2 h-4 w-4" />
                      Create Ticket
                    </Button>
                  </CardContent>
                </Card>
              ) : (
                filteredTickets(status).map((ticket) => {
                  const StatusIcon = getStatusIcon(ticket.status);
                  return (
                    <Card
                      key={ticket.id}
                      className="hover:shadow-md transition-shadow"
                    >
                      <div className="flex flex-col md:flex-row justify-between items-start md:items-center p-4 gap-4">
                        {/* Left side: Avatar + ticket info */}
                        <div className="flex items-start gap-3 flex-1">
                          <Avatar>
                            <AvatarImage
                              src={ticket.user_avatar || ""}
                              alt={ticket.user_email}
                            />
                            <AvatarFallback>
                              {ticket.user_email
                                ? ticket.user_email.charAt(0).toUpperCase()
                                : "U"}
                            </AvatarFallback>
                          </Avatar>

                          <div className="space-y-1">
                            <CardTitle className="text-lg">
                              {ticket.subject}
                            </CardTitle>
                            <p className="text-sm text-muted-foreground">
                              Ticket #USR-{ticket.id}
                            </p>
                            {/* With this */}
                            <p className="text-muted-foreground line-clamp-2 mt-2">
                              {getLastMessage(ticket)}
                            </p>
                          </div>
                        </div>

                        {/* Right side: meta info & actions */}
                        <div className="flex flex-col items-end gap-2 text-sm text-muted-foreground min-w-[220px]">
                          <div className="flex gap-2">
                            <Badge variant={getStatusColor(ticket.status)}>
                              <StatusIcon className="w-3 h-3 mr-1" />
                              {ticket.status}
                            </Badge>
                            <Badge variant={getPriorityColor(ticket.priority)}>
                              {ticket.priority}
                            </Badge>
                          </div>

                          <span>
                            Created:{" "}
                            {ticket.created_at
                              ? new Date(ticket.created_at).toLocaleString()
                              : "—"}
                          </span>

                          {/* With this 
                          <span>
                            Last reply:{" "}
                            {getLastMessageDate(ticket) || "No replies yet"}
                          </span>
*/}
                          <span>
                            <MessageCircle className="inline w-4 h-4 mr-1" />
                            {ticket.messages_count} messages
                          </span>

                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setSelectedTicket(ticket)}
                          >
                            <Eye className="w-4 h-4 mr-1" />
                            View Messages
                          </Button>
                        </div>
                      </div>
                    </Card>
                  );
                })
              )}
            </TabsContent>
          ))}
        </Tabs>
      </div>

      {/* Ticket messages dialog */}
      <Dialog
        open={!!selectedTicket}
        onOpenChange={() => setSelectedTicket(null)}
      >
        <DialogContent className="max-w-2xl flex flex-col">
          <DialogHeader>
            <DialogTitle>
              Ticket #{selectedTicket?.id} - {selectedTicket?.subject}
            </DialogTitle>
            <DialogDescription>
              Conversation between you and support
            </DialogDescription>
          </DialogHeader>

          {/* Messages area */}
          <div className="flex-1 overflow-y-auto space-y-3 p-2 border rounded-md bg-muted/30 max-h-[400px]">
            {loadingMessages ? (
              <p>Loading messages...</p>
            ) : messages.length === 0 ? (
              <p className="text-muted-foreground">No messages yet.</p>
            ) : (
              messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`p-3 rounded-xl shadow-sm max-w-[75%] ${
                    msg.user_id == userId
                      ? "bg-primary text-primary-foreground ml-auto"
                      : "bg-secondary text-secondary-foreground mr-auto"
                  }`}
                >
                  <p className="text-sm">{msg.message}</p>
                  <span className="text-xs opacity-70 block mt-1">
                    {new Date(msg.created_at).toLocaleString()}
                  </span>
                </div>
              ))
            )}
          </div>

          {/* Reply box */}
          <div className="mt-3 flex gap-2">
            <Input
              placeholder="Type your reply..."
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
            />
            <Button onClick={handleSendMessage} disabled={sending}>
              {sending ? "Sending..." : "Send"}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <UserMessagesModal
        ticket={selectedTicket}
        onClose={() => setSelectedTicket(null)}
      />
    </DashboardLayout>
  );
}
